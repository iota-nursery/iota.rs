#![feature(test)]
#![feature(alloc)]
#![no_std]

extern crate alloc;
extern crate test;

extern crate iota_trytes as trytes;
extern crate iota_curl as curl;

use test::Bencher;

use alloc::Vec;
use trytes::*;
use curl::*;

const TRINARY: &'static str = "9999999999999999999999999999999999999999999999999999999999999\
                9999999999999999999999999999999999999999999999999999999999999\
                9999999999999999999999999999999999999999999999999999999999999\
                9999999999999999999999999999999999999999999999999999999999999\
                9999999999999999999999999999999999999999999999999999999999999\
                9999999999999999999999999999999999999999999999999999999999999\
                9999999999999999999999999999999999999999999999999999999999999\
                9999999999999999999999999999999999999999999999999999999999999\
                9999999999999999999999999999999999999999999999999999999999999\
                9999999999999999999999999999999999999999999999999999999999999\
                9999999999999999999999999999999999999999999999999999999999999\
                9999999999999999999999999999999999999999999999999999999999999\
                9999999999999999999999999999999999999999999999999999999999999\
                9999999999999999999999999999999999999999999999999999999999999\
                9999999999999999999999999999999999999999999999999999999999999\
                9999999999999999999999999999999999999999999999999999999999999\
                9999999999999999999999999999999999999999999999999999999999999\
                9999999999999999999999999999999999999999999999999999999999999\
                9999999999999999999999999999999999999999999999999999999999999\
                9999999999999999999999999999999999999999999999999999999999999\
                9999999999999999999999999999999999999999999999999999999999999\
                9999999999999999999999999999999999999999999999999999999999999\
                9999999999999999999999999999999999999999999999999999999999999\
                9999999999999999999999999999999999999999999999999999999999999\
                9999999999999999999999999999999999999999999999999999999999999\
                9999999999999999999999999999999999999999999999999999999999999\
                9999999999999999999999999999999999999999999999999999999999999\
                9999999999999999999999999999999999999999999999999999999999999\
                9999999999999999999999999999999999999999999999999999999999999\
                9999999999999999999999999999999999999999999999999999999999999\
                9999999999999999999999999999999999999999999999999999999999999\
                9999999999999999999999999999999999999999999999999999999999999\
                9999999999999999999999999999999999999999999999999999999999999\
                9999999999999999999999999999999999999999999999999999999999999\
                9999999999999999999999999999999999999999999999999999999999999\
                9999999999999999999999999999999999999999999999999999999999999\
                9999999999999999999999999999999999999999999999999999999999999\
                9999999999999999999999999999999999999999999999999999999999999\
                9999999999999999999999999999999999999999999999999999999999999\
                9999999999999999999999999999999999999999999999999999999999999\
                9999999999999999999999999999999999999999999999999999999999999\
                9999999999999999999999999999999999999999999999999999999999999\
                999999999999999999999999999999T999999999999999999999999999999\
                99999999999999999999999OLOB99999999999999999999999";

#[bench]
fn curl_pair(b: &mut Bencher) {
    let trans: Trinary = TRINARY.chars().collect();

    let trits: Vec<BCTrit> = trans.trits();
    let mut curl = CpuCurl::<BCTrit>::default();
    curl.reset();
    curl.absorb(&trits);
    curl.squeeze(243);

    b.iter(|| {
        curl.reset();
        curl.absorb(&trits);
        curl.squeeze(243);
    })
}

#[bench]
fn curl_simple(b: &mut Bencher) {
    let trans: Trinary = TRINARY.chars().collect();

    let trits: Vec<Trit> = trans.trits();
    let mut curl = CpuCurl::<Trit>::default();
    curl.reset();
    curl.absorb(&trits);
    curl.squeeze(243);

    b.iter(|| {
        curl.reset();
        curl.absorb(&trits);
        curl.squeeze(243);
    })
}
