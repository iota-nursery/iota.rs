#![allow(unused_imports)]

use super::*;
use trytes::*;
use core::iter::FromIterator;

mod inner {
    use super::*;

    fn test_hash_eq<A, B>(trans: Trinary, expected: Trinary)
    where
        A: Copy + Clone + Sized,
        B: Curl<A>,
        Trinary: IntoTrits<A> + FromIterator<A>,
    {

        let mut curl = B::default();
        let trits = trans.trits();
        curl.absorb(trits.as_slice());
        let hash: Trinary = curl.squeeze(HASH_LENGTH).into_iter().collect();

        assert_eq!(hash, expected);
    }

    pub fn hash_works2<A, B>()
    where
        A: Copy,
        B: Curl<A>,
        Trinary: IntoTrits<A> + FromIterator<A>,
    {

        let trans: Trinary = "RSWWSFXPQJUBJROQBRQZWZXZJWMUBVIVMHPPTYSNW9YQIQQF9RCSJJCVZG9Z\
                                   WITXNCSBBDHEEKDRBHVTWCZ9SZOOZHVBPCQNPKTWFNZAWGCZ9QDIMKRVINMI\
                                   RZBPKRKQAIPGOHBTHTGYXTBJLSURDSPEOJ9UKJECUKCCPVIQQHDUYKVKISCE\
                                   IEGVOQWRBAYXWGSJUTEVG9RPQLPTKYCRAJ9YNCUMDVDYDQCKRJOAPXCSUDAJ\
                                   GETALJINHEVNAARIPONBWXUOQUFGNOCUSSLYWKOZMZUKLNITZIFXFWQAYVJC\
                                   VMDTRSHORGNSTKX9Z9DLWNHZSMNOYTU9AUCGYBVIITEPEKIXBCOFCMQPBGXY\
                                   JKSHPXNUKFTXIJVYRFILAVXEWTUICZCYYPCEHNTK9SLGVL9RLAMYTAEPONCB\
                                   HDXSEQZOXO9XCFUCPPMKEBR9IEJGQOPPILHFXHMIULJYXZJASQEGCQDVYFOM\
                                   9ETXAGVMSCHHQLFPATWOSMZIDL9AHMSDCE9UENACG9OVFAEIPPQYBCLXDMXX\
                                   A9UBJFQQBCYKETPNKHNOUKCSSYLWZDLKUARXNVKKKHNRBVSTVKQCZL9RY9BD\
                                   TDTPUTFUBGRMSTOTXLWUHDMSGYRDSZLIPGQXIDMNCNBOAOI9WFUCXSRLJFIV\
                                   TIPIAZUK9EDUJJ9B9YCJEZQQELLHVCWDNRH9FUXDGZRGOVXGOKORTCQQA9JX\
                                   NROLETYCNLRMBGXBL9DQKMOAZCBJGWLNJLGRSTYBKLGFVRUF9QOPZVQFGMDJ\
                                   A9TBVGFJDBAHEVOLW9GNU9NICLCQJBOAJBAHHBZJGOFUCQMBGYQLCWNKSZPP\
                                   BQMSJTJLM9GXOZHTNDLGIRCSIJAZTENQVQDHFSOQM9WVNWQQJNOPZMEISSCL\
                                   OADMRNWALBBSLSWNCTOSNHNLWZBVCFIOGFPCPRKQSRGKFXGTWUSCPZSKQNLQ\
                                   JGKDLOXSBJMEHQPDZGSENUKWAHRNONDTBLHNAKGLOMCFYRCGMDOVANPFHMQR\
                                   FCZIQHCGVORJJNYMTORDKPJPLA9LWAKAWXLIFEVLKHRKCDG9QPQCPGVKIVBE\
                                   NQJTJGZKFTNZHIMQISVBNLHAYSSVJKTIELGTETKPVRQXNAPWOBGQGFRMMK9U\
                                   QDWJHSQMYQQTCBMVQKUVGJEAGTEQDN9TCRRAZHDPSPIYVNKPGJSJZASZQBM9\
                                   WXEDWGAOQPPZFLAMZLEZGXPYSOJRWL9ZH9NOJTUKXNTCRRDO9GKULXBAVDRI\
                                   ZBOKJYVJUSHIX9F9O9ACYCAHUKBIEPVZWVJAJGSDQNZNWLIWVSKFJUMOYDMV\
                                   UFLUXT9CEQEVRFBJVPCTJQCORM9JHLYFSMUVMFDXZFNCUFZZIKREIUIHUSHR\
                                   PPOUKGFKWX9COXBAZMQBBFRFIBGEAVKBWKNTBMLPHLOUYOXPIQIZQWGOVUWQ\
                                   ABTJT9ZZPNBABQFYRCQLXDHDEX9PULVTCQLWPTJLRSVZQEEYVBVY9KCNEZXQ\
                                   LEGADSTJBYOXEVGVTUFKNCNWMEDKDUMTKCMRPGKDCCBDHDVVSMPOPUBZOMZT\
                                   XJSQNVVGXNPPBVSBL9WWXWQNMHRMQFEQYKWNCSW9URI9FYPT9UZMAFMMGUKF\
                                   YTWPCQKVJ9DIHRJFMXRZUGI9TMTFUQHGXNBITDSORZORQIAMKY9VRYKLEHNR\
                                   NFSEFBHF9KXIQAEZEJNQOENJVMWLMHI9GNZPXYUIFAJIVCLAGKUZIKTJKGNQ\
                                   VTXJORWIQDHUPBBPPYOUPFAABBVMMYATXERQHPECDVYGWDGXFJKOMOBXKRZD\
                                   9MCQ9LGDGGGMYGUAFGMQTUHZOAPLKPNPCIKUNEMQIZOCM9COAOMZSJ9GVWZB\
                                   ZYXMCNALENZ9PRYMHENPWGKX9ULUIGJUJRKFJPBTTHCRZQKEAHT9DC9GSWQE\
                                   GDTZFHACZMLFYDVOWZADBNMEM9XXEOMHCNJMDSUAJRQTBUWKJF9RZHK9ACGU\
                                   NI9URFIHLXBXCEODONPXBSCWP9WNAEYNALKQHGULUQGAFL9LB9NBLLCACLQF\
                                   GQMXRHGBTMI9YKAJKVELRWWKJAPKMSYMJTDYMZ9PJEEYIRXRMMFLRSFSHIXU\
                                   L9NEJABLRUGHJFL9RASMSKOI9VCFRZ9GWTMODUUESIJBHWWHZYCLDENBFSJQ\
                                   PIOYC9MBGOOXSWEMLVU9L9WJXKZKVDBDMFSVHHISSSNILUMWULMVMESQUIHD\
                                   GBDXROXGH9MTNFSLWJZRAPOKKRGXAAQBFPYPAAXLSTMNSNDTTJQSDQORNJS9\
                                   BBGQ9KQJZYPAQ9JYQZJ9B9KQDAXUACZWRUNGMBOQLQZUHFNCKVQGORRZGAHE\
                                   S9PWJUKZWUJSBMNZFILBNBQQKLXITCTQDDBV9UDAOQOUPWMXTXWFWVMCXIXL\
                                   RMRWMAYYQJPCEAAOFEOGZQMEDAGYGCTKUJBS9AGEXJAFHWWDZRYEN9DN9HVC\
                                   MLFURISLYSWKXHJKXMHUWZXUQARMYPGKRKQMHVR9JEYXJRPNZINYNCGZHHUN\
                                   HBAIJHLYZIZGGIDFWVNXZQADLEDJFTIUTQWCQSX9QNGUZXGXJYUUTFSZPQKX\
                                   BA9DFRQRLTLUJENKESDGTZRGRSLTNYTITXRXRGVLWBTEWPJXZYLGHLQBAVYV\
                                   OSABIVTQYQM9FIQKCBRRUEMVVTMERLWOK"
            .chars()
            .collect();

        let hash: Trinary = "KXRVLFETGUTUWBCNCC9DWO99JQTEI9YXVOZHWELSYP9SG9KN9WCKXOVTEFHFH\
                                 9EFZJKFYCZKQPPBXYSGJ"
            .chars()
            .collect();

        test_hash_eq::<A, B>(trans, hash);

    }

    pub fn hash_works1<A, B>()
    where
        A: Copy,
        B: Curl<A>,
        Trinary: IntoTrits<A> + FromIterator<A>,
    {
        let trans: Trinary = "9999999999999999999999999999999999999999999999999999999999999\
                              9999999999999999999999999999999999999999999999999999999999999\
                              9999999999999999999999999999999999999999999999999999999999999\
                              9999999999999999999999999999999999999999999999999999999999999\
                              9999999999999999999999999999999999999999999999999999999999999\
                              9999999999999999999999999999999999999999999999999999999999999\
                              9999999999999999999999999999999999999999999999999999999999999\
                              9999999999999999999999999999999999999999999999999999999999999\
                              9999999999999999999999999999999999999999999999999999999999999\
                              9999999999999999999999999999999999999999999999999999999999999\
                              9999999999999999999999999999999999999999999999999999999999999\
                              9999999999999999999999999999999999999999999999999999999999999\
                              9999999999999999999999999999999999999999999999999999999999999\
                              9999999999999999999999999999999999999999999999999999999999999\
                              9999999999999999999999999999999999999999999999999999999999999\
                              9999999999999999999999999999999999999999999999999999999999999\
                              9999999999999999999999999999999999999999999999999999999999999\
                              9999999999999999999999999999999999999999999999999999999999999\
                              9999999999999999999999999999999999999999999999999999999999999\
                              9999999999999999999999999999999999999999999999999999999999999\
                              9999999999999999999999999999999999999999999999999999999999999\
                              9999999999999999999999999999999999999999999999999999999999999\
                              9999999999999999999999999999999999999999999999999999999999999\
                              9999999999999999999999999999999999999999999999999999999999999\
                              9999999999999999999999999999999999999999999999999999999999999\
                              9999999999999999999999999999999999999999999999999999999999999\
                              9999999999999999999999999999999999999999999999999999999999999\
                              9999999999999999999999999999999999999999999999999999999999999\
                              9999999999999999999999999999999999999999999999999999999999999\
                              9999999999999999999999999999999999999999999999999999999999999\
                              9999999999999999999999999999999999999999999999999999999999999\
                              9999999999999999999999999999999999999999999999999999999999999\
                              9999999999999999999999999999999999999999999999999999999999999\
                              9999999999999999999999999999999999999999999999999999999999999\
                              9999999999999999999999999999999999999999999999999999999999999\
                              9999999999999999999999999999999999999999999999999999999999999\
                              9999999999999999999999999999999999999999999999999999999999999\
                              9999999999999999999999999999999999999999999999999999999999999\
                              9999999999999999999999999999999999999999999999999999999999999\
                              9999999999999999999999999999999999999999999999999999999999999\
                              9999999999999999999999999999999999999999999999999999999999999\
                              9999999999999999999999999999999999999999999999999999999999999\
                              999999999999999999999999999999T999999999999999999999999999999\
                              99999999999999999999999OLOB99999999999999999999999"
            .chars()
            .collect();

        let ex_hash: Trinary = "TAQCQAEBHLLYKAZWMNSXUPWQICMFSKWPEGQBNM9AQMGLFZGME9REOZTQIJQRKYH\
                             DANIYSMFYPVABX9999"
            .chars()
            .collect();

        test_hash_eq::<A, B>(trans, ex_hash);
    }

    pub fn test_pow_2<A, B, C>()
    where
        A: ProofOfWork,
        B: Copy,
        C: Curl<B>,
        Trinary: IntoTrits<B> + FromIterator<B>,
    {
        let tx: Trinary = "ANUSTEVOTMKPDXUHTPKTQXDXYAXPDNQTODLJBOEPIJ9KLCFQDVDYLEJIFNDU\
HLJBUJ9EANJPRKUPMEPRJMBWEOSBMMNFNHXPKKPGJWAPVYQMXAKDPEUNWUWKY\
YVWFQOGAJWCNRVRDYHZOKRKPWHXPZLSFD9GDQE9SHZE9GNCDJXOTZZTUJNLES\
NUCOARXTXH9EVIYQOBJRNTRV9QNYKQIRSLKDIGM9NBJENRKGTZUGCBCGDWFYC\
Y99JOGRDCMZZQYYOIODKQYNIYHBVWYOTCIEIXAB9LVGBHWFDLHYOFDNAKPUUS\
TFQTJMLGXPMBPOTCTTHIWLIOQADDGPU9HLUZMRNQSXGE9CKQNJDBVVDDKJSWF\
BLQLXTSXBPGYNFSNPTZMFGKLDXKVBVICGNQM9TO9DSLN9GF9WSUDFFONSFLES\
MSOMCHMDBKSYDEEBABNTLWGHZESZZCNUJKCYZMRWLQAZDBINTZKTIQCMIJHOJ\
TZSIAWGCSPSA9JNOFALWVH9OTSTLNTORAQFMPLNBPZWTIAOOPEHWBCWWXZD9D\
WQ9PLIJMG99WKDGXREQRIH9CXUKYKTZYWO9UDNJRBXLWDVMXZMUSNHFLDVBSI\
XTB9LMMWUBGIIYXU9GPKZYQ9RARJJFGYRY9MFTDV9JHNRVVUWNDYNZLPKMUKQ\
ALJAHXGQQK9KUGRWGODMPMCKMMXEPAOWWMIDOQFKGH9MPUMBMFRQAPBAVAVKC\
RIVVCZAJRXFGMEJNLYJBGIRGKEWATNZ9OYANETQDICTEBFJGNQMHAURGHRCCI\
QLHYYBYHDKXKLCEGEYBO99DAFVL9YVYSZFIEDJIIBJLGTZNNFBWZCKLMMYTVY\
ZDEGEBWABBGGZCJDVOACEYUWC9E9GRJWILAIRHEVLTOSPFMIVXOLQWQ9EWQVW\
9YKWKXZAAQOSNLLRPUJSVDEQXUEFSABNAPGXGOTBLY99URYVGWQNBXWNANWXE\
TFXZYWGTSSVVERST9LLLBDNNQJ9JEFTLXSOZNZNNKZQVBJLYXLFGXSQURVXNX\
RVGLVBJASMU9UNSVYBDHOEMFLIB9L9CCDULPEVJMPYGVEWXTZUYDZHYPQLBYF\
RKGDZB9KCVHYQSE9ITOSAOFJXPXWHXCVOGCKLZGQMXBFSETYATRZI9EOTYLGL\
99CIAZHRHPDWGSGU99P9QIXRCYPRKQPIWXJWLYMOSNFKRJCKA9JDUDRZZKTSG\
9LFNYOETBQQX9XKF9IWSJAOZHA9EPGKAROUQOVT9ETDT9FHNYBZJXR9XOYT9P\
OOUWSIPUEGFDCGDROJRQGEZRVHNHVTMOYBSLBRHDRYGC9YMZJAYHHCRKUILQY\
ID9UXDPEZIPXYZTCRACJMSLJJ9YCLUZYPGABJBONNVFJCMKYYYHIOHTYINAUN\
F9ZEJXOMRCC9UKCTLLBZDYGQPRIX99IVVNNUOFQEQ99IJZKHCCKOQYZOTMXTK\
HOJJFMGVFJZ9FBN9PWFSMLIKYLMAIFUXOMGFL9VUNYWCSSQW9HXWAXUXJYKSA\
ELLHNRQPY9LHFD9OBLLWJHUDQTVNQYTJQJZOMHCXTUGVDHROYINGNOAEMBCRT\
NRFGZTSVBWEYWMYXRYJFULKHVZJIOXJIBMFNBLUCYEQSCUSWAQQUHPDHLRYFJ\
IXDAIZASQKJPVEZHJSMLFZWABMWCVECUKXPTPWVISGBTMAWOXADVEJTQEO9US\
NIETDHJXYPVEANSYAGOEYMTZX9VKUNCGSFWPNSRVHJJSKDOUVDDZCZVYDXOZK\
UAWWWHYMFOOSYJROJIIZJ9CZFNCDRFILKZGKYVZEGAHWYBJJCSHRODZPT9D9R\
AZLCMFCEGSVPLDOJ9TCRBKFMCPUXCYYFTYUBISKGISCKLN9MCVYVCVUJSFPMD\
SOGQMHTS9WHF9UIEDBCLQFRJLJMBEGJUZMQZQILUQTNPGABTXDUIJBKLUFJEJ\
DUS9CIXFPEON99UNXSSFHUGVCTGLMKTULVAVLIFIZUE99TFJTNUKYPVQKLHEW\
MZGWRDYCUMBP9VNRTMVHCK9TYJGMVRPCXZCPRJXWMLDTYUCZTPBVT9F9LW9B9\
RQGRR9CVRNEZNQALHDZKMYIZVFFUBZWHCPHXCSKYIQTU9HZSLS9J9HTLJFYVI\
QXBJOUOJXIXVCKFHZSRIZDRF9G9ZBYGOBWA9HMIKDVIPWFACEZCXM9HHIUJBO\
ZVNFVZUUGQSNDJIBVVEXQDULJODGOCGGCCRJNFLOBUUEZOIUVUFLGFTVNMS9A\
UKWPWURGPZYOWGMEOFYBFSHHJLJAYQEEW9CSLUATCZDOBYSCGHYWOZ9OUKWSA\
ZNTO9GCHXDGTLYAGHGLIMPVFU9YQRNQ9VIFPOPRFSDTRXGPPNPBNCMPDIQPVO\
RCWILAVHZBTILSRRIGBGLJEIWZOEKGCAO9IFOHJHKMPIPKAZNTKFGKLNZUVZE\
RJGVFKHGKZYWLENIYWG9JXAPPWXJHASLUAJXQUEQIFWHFCYTUIYVGSKQHGQJC\
FLSNMXBSTYGV9XVKRFEXVDQUNAFEIEEWSBWPHYNF9WVNOZHBRHCOCQT9WCQLO\
MSHRTTPKGXEETYWVDHBJTABUNYDMD9BSZFABULATNGSJNJVFHPYQAU99JIOPY\
PLEYGTHGFQQVBHMIJALHHCCMGAVAI9KJFQBAXVRBYHECMKMVTGV"
            .chars()
            .collect();
        let hash: Trinary = "TNIVNBRAZMBJPRTI9ZIMFQECDUCXATU9GWYSDXVPQICXDLIEJGJRRLJMV9ERBX9BSVRMDGJPXIRPIB999"
            .chars()
            .collect();

        test_pow::<A, B, C>(tx, hash, 9);
    }

    pub fn test_pow_3<A, B, C>()
    where
        A: ProofOfWork,
        B: Copy,
        C: Curl<B>,
        Trinary: IntoTrits<B> + FromIterator<B>,
    {
        let tx: Trinary = "GYDFFCAYWCNTWOZKRYUHLXRNEK9WBEHYEJIINMTZXVRBEODTSDLMVCJNXYGV\
WSGHDK9VBEIJED9IJEMUFLZ9QKYSHUJXWUEIIHIBPONZTABAWYPQTFERFUIBB\
PMLDTNNPZNYIWYGONGYWUNMPYHL99TFALIEKHOYUDWJWUAGTRSXYC9GXRFUPW\
UPLERLVXXPUDNTXVFOMS99ZODIMSAQNJTEVZOHBRPPHVAIIRCCIEK9DJZRBDG\
OINJYTEUVZEICWZPUYSXPCX9YGROWLWLVKRUDHBRIPKCXJHTJIJYWEYKSHWVO\
99UQLVD9SKDPZVAYARMBCBKHTYRDESHHEBJGPXMWIZQHEWBYGWIGUCQRGOOIW\
OWFBFNZCJLQOGJKGHPWKXYDXBRRN9XWUVXQSWPUXEXWFERPXZKJCIW9VQJLMO\
KULACAWJZLKYQLBFNBAYEUESQ9VMBCIGLDEPMWJOCEAD9ZMRTVPILXENYMHPG\
LSKFPCXXXGRKT9KQPBCXAINOJSCQGTMIGFSY9REJJ9ZWA9SSBLYMETJLGXJEH\
JDZOVCJEGVHPFQNAAUDRRCX9LUTNQYVMTKIC9ZGPNMOTMRXUSIRHRHOMAPBZK\
S9CBNUNDYXWLRJNKOOGJXVCQIPFGGYVQJBXBGBHKQA9UOBCMJMLORRNVCTHHJ\
MWHWWXQMZZCUQYSXISVOCTTVSCWPAIPMZOENOEVAMVSBPRXBITEGRBXHLIGRH\
RCHHHGUVPMHZCYWDKSWPQQXXOGNRJFJGJXFQD9CCKUUGLZTLXOCBQYEFWLNKY\
OZZY9ZXFSTRDCCDPQAQRPRWIJKTUYUPSVXJHHFAXDZBYYKGJLRIKERJXX99HT\
DJPUUBFSKWOKEOSJGJCQMDUDBFISCVDRTXADWIFBUKSAWTAXQVQPKBQYATOAB\
HAXEQ9IUIYMTGMGCSJYQLUVLUFYTGS9XYAKWNCRHYWMZONXQGXBRRLTIRLQXA\
CZABRZTKKQINNZYGVWTTVDIHZLSY9PTFIHKGLRSDQUAQGWLNNMYKHJWBQSVOT\
WNSFILIBRNWMLGPHZIGPZWZNUFDJLFGGWPLYYQRPTIZIJX9TMZKKD9NQEORXP\
BNOZWLVBLMBYVXWYTYGMTIFCPGDGKEAJTKGNMJFHQNRAPDGOXWYYNWASQEHLO\
OJCPBKGHANLHUWDZCMHPU9XBDRLISP9AYZHPJ9AHVIVFLXFEMFSGKZYKTL9LN\
LQCIXKKHFKTOOZTSIIIFTKPWNRBOIQG9AJD9MOQEUAFPHFZXRMAPPUOMERC9V\
UAATXRJMIBDTESPZ9AEJHCBJPPCGOVFEWYHPKISFUTMTLCVTRXPLLXNSOEDKS\
OJATBLFRBUPK9WUXDIPISRWMBHIVBMRKMOJXVIIE9UAUOSKIWZLPGYTVQXLLX\
XKDDHBEMSQPFFALTSGZPUCNNWMOXCNKZFZZFCMVFPOFVBXTIZJCSEDFWSKFKR\
VGP9UTEVXRMOVQ9ERSFWDPQUOXOUWZGVDQXAA9MWTWYAQQ9BNMIQPPTN9OGSE\
9NLEVAIOEQBIYDTBCMKALVL9IZDXYGCZQTGZUAPZV9RJONDVGINRYNOLHUMEV\
KZXKLCBUUFKPGNNP9RHGGSEUYTOOGNBVSCRY9SLBDYGUPKNSVQGYBGYHTWIBZ\
BUUDRIPXINWETFZKDDWQKKYVRYMTRV9JEKIWOBTFINZRTYEFA9KHJOHHFWECG\
HQJMBJNULUUYJDFPKTKVGWECHMUNTT9ACKEHPKNGZKHRRGIDMYYZIXTIOXOEE\
HELULFSONYBCIVRXDJCQLNFAIRMUGLU9WTWKQIGHCUTZGTLMKDSJDBIGMGYBG\
POVSWNUGKJANXOASIWNXUBCQKUJPIZWWAIRDPIGFKRP9NCLEAJYZGRCGPN9AP\
UV9PSBNGRPEGTNYUAFQO9XPZMNBDZEQAJWTNYLLCDGMRWNGQVHYDIKVXQYGUT\
RRRXANTRLXLLYYFSMEDTIAOKNRX9VLRZQFYQKXFUVYWFDANDQDGYATADK9JEL\
TMNBDYTKTAMQV9DIVUMHCBUTDNWUWEKGHSEHHZTAURPJCPSWLDADSS9MMMDHX\
TGFOWUSAUJ9GAD9HBXHVXKBHUOHDFWDCLPPWDFCSDM9XMTUIOMIXFDSINSVIF\
GMJTYQUTIQZQLNKPO9HAIFDGUQWYKCQFOX9UAPHPZJDVZPRNAXRQOPMQTKAXR\
LCOYEJKXWIJEMGJLFJIPJJKMALTDBZABGPGNSMZNAUVBOD99KVJSKHRFDNYBY\
ZBFKSJTCPVLCTXXBXZDWDPZMXWVSXCOO9ACCMGEDXKHJZHGTHGY9TAVDBQVSV\
B9DOKFDGIYV9QRBHKKELVUZMGCDKMEQCGN9QNZODI99HWARVFITOULFFDHHPT\
HFL9MIMWUINWGOYVDFZHGDEDAEO9AXEDVERMKNRLXHLGPMULZQNJABHEJSBVY\
QXUXCFSZIPT9DHEZEDTZKMUBSUCENKMYX9CVPKPVOUSYVTWR9FWFLCHHMZFZO\
YFXYTXLWGZOI9GCFDOQUX9YVETXAIWP9KQHQYBNKOERSAEGJHVCVBNUZXNNUV\
CXNWLXTARAYKG9IEOTGBFJ9FFMXMXGGS9VIKOKKXFPJVRVIGGBJA9AVNHUDZM\
FOTUDBLUBNBOYDS9AXKOIILHBTBHKKJRSAEILNOTYSQFM9JNQUR"
            .chars()
            .collect();

        let expected: Trinary = "ZWCIJJYQS9OFOAURIICHPWQTBCJFVMMAJHVNNIWDHIZSVND9LMPCSBOQBFKCISHZJLGUSRXPZQAC99999"
            .chars()
            .collect();

        test_pow::<A, B, C>(tx, expected, 15);
    }

    pub fn test_pow_1<A, B, C>()
    where
        A: ProofOfWork,
        B: Copy,
        C: Curl<B>,
        Trinary: IntoTrits<B> + FromIterator<B>,
    {
        let tx: Trinary = "NQRMCYTRPDTFHHSDAOXUDSIF9SDFBDFZTLRK9WBNRRVEKGOMGUOWGQNYAAPF\
TSXJXX9EKHMIGLHNECCEMLEMOKNOHNKSZMC9QVANBUWXYEYJGWIRSFRVSZKZQ\
VGPXMLQPXUQZHSKEVHAOJXWJEZOHIDTFSOAYMFLYFENVTHKSVLQKYDOAAFXKP\
GMFFKNQMEQJXUQHWOPAKBEVUNHLRWWRAVSLSIPYJGLLORIJEBADCOCIEBBSXH\
LU9BYUXBGNKUSUEKVDTYWKEFVDSOUT9JSRZFJXEKSWAMCIHBOFIBEJVVFJGKG\
ODUPSKJLVXVGDTNENRQPHFMXFLDEQXFXJFDIUFBX9JEQLRBAWEILVJOJGPCJE\
MYFWVFDKXGLXILQOA9NMQFINXOBVLVCHBTXTNBAYPSUJCBGJDHNAYWTREVNPE\
SRIAHZIBOJQPTNCLABI9OCKIHUSW9QHGXQZGSBHVUYQMTFIPFLBBEBPKFEKQC\
FQDXXGGUYHQUYFQTPNX99JUMZXNRZOYACJIITMWOYM9WAKGMLOZIG9RGVYPJR\
L9RNETVTPIWSAYA9XFKQPYFDQQXHTXDMSPUVVYPQLGIPPDMLPPXZUDTQDNPGU\
RJDDYTWOESXCICIIW9KSEXTNOCAGSAYUVQKZEHBSEETWLSYXZEJXNYMEWJEHG\
GCDKYZMJUXITZVWMU99IP9YGZPXJFYYXSVZWSUQJYH9YTOJRKIJJ9GESMILKT\
WTGCOJOOPNASELNEPKVSEPDXUJYTSCARBFDOUWNJVQBUANDKLGKQRSEZJZWFE\
HGGAFLJKONKTSZUYDGOWDDYTLRSS9XBGXCSGKRGJED9IZNVYIMQEAXLTSTGAF\
IHOZJKUGTITELZXGQQVPXMCNGJWCERWX9ZHFLBOPTPDBBPJPR9ZQWVY9XWUVS\
PUDCSALRDHFGXKUZ9SMMOTPCJYULYEKLKQYSCETUELKCIJMOR9EQLYGDMXOVG\
I9TNSYXEWNOCRAXARZQHJVFPEJNTPDF9QCSYUSYIQDYWXDWQUEDI9DVW9SGLA\
TNBLMFUPYBJCTIYZUXEFHYOUSMQMGMFAEVBFQQTKYQQZSDZ9K9NWVTSKIIYUV\
ANDYQHMWFOVJG9TUVTGX9OVCCLEUMGVVPJRX9UVXCWDMVIPOV9HJJKEOSXZAD\
O9ISMLANZFFLELATQOKDKMCUHKRIBEBWZFFZEEPECDXSAQUSESFIGDJYYHNTV\
VBJTSIEDPKXACQCONBIPWNFHEBGUDFVZMOFTHJJSVAFQC9AOYJHAXS9RZDJLR\
ADDUIPOEZPSCEFCQCXPWMAFRYKQUOUQXLZXOUAKDKLAKAFKTWKMDXFRE9QUEY\
GFC9VPBPCFSVTRCSHCCCSISGPJOZCARGPXNLXTRSBDXYBIFTDKFISGCVYWR9U\
SFQNFKQPQAAUMIJEQGVWZYGAUOWMKO9AU9WGCFKWDKE9OMNDLWKSTQVJ9BOBH\
CJDBZMDBJPMKFL9EVVF9BHUPECRKG9FYOKIRTMGBNSOBQLBKODMZTKSOLN9CG\
PKKKSPXBPMAGIOCCKCMEQDVWMNZXBHRANOB9KDGOISXRMO9JNFQLVHRLDNQHJ\
RQEBAJKQAQWEKBVHKBLNOGENPBTVARFYMRJTYEPNNCBNCKGCBMNGCQDSTHYBD\
VEAMJYTTSUEKXBBZKVPHZHPQIRECOUGETGYDYBEUYJUYXLZOXV9UWHNSQYODC\
IRXDCOSAWQPBH9YLLAZIFFQDNTVOOUCJMLLNQTGBDWFKTDTAFVSYRPZPDDCI9\
PFGVFYXZEGZKIGUXFDRJNTIJYOPZJBUJVVESVQEY9SUKAQKCMZXSDWYYKFECJ\
OLH9NFXVKFCSURESDZQN9SHMN9GEAXYPXOTJNVSMLPCVOAYOGTHGOFSIZPFRJ\
FXQSAIEZPZJIPUKZUSPAFICUQYBGSAUKLHCNLXNXWNZSVYPBFOC9BMDTYCWRY\
HSIVRN9RMMAXMRJ9WEHVDMVJSHOUACPXAZVAY9UZGYVMSSAXJTZTYGCIUCBOD\
RDSLYHAVEJXFDQGQSIRGMBECWBQWBZRGUQDBZMOUSLSTAISKOWXGBOVQCJIUN\
NYBYIJTJ9RGFIGZQ9BQWWYAMTMIPYZKUNXCH9ADBIYBTPFBZGQKSUMYQPYBAP\
P99PDLMKQVQS9PRUL9MPTPVBURKHHFBL9EQUIWDGGWNQ9PNUMHBCGPWUOCKKC\
IYMKABRFJECTWKOMNUWPMQSANGGUNXDAMOPYHTESXWMBUWAVYFJZ9UGIIHSNA\
YQKLKEGSAXEIGPGBTEIHKSIZAHMIJXPHUMXL9UDZPDLQJGVP9BGTYPWCGAMLN\
UZFOHH9HSLXQ9REQZRNWAJKFGOAMW99J9EKKGQVJKCT9MPFAF9ZJXGOWLYEGB\
PZEMJMLRCEZHKPMAWHMGTTIXTXDUUAJMQHAKZPREBHKDSSKKWXOGVAXHAPRHW\
GUNIRWJKYKLFUCCDAJQOHMXHGFJCJQK9NRHDNVFWAKJHEHWQEE9ABLSVMGXUA\
WXKIKXHUUXMRJAJYIILVJHTZQKCJHJYEIGAGLIZQXOJOL9JYOYENGISIVMSRC\
VQRUTDKEAQNK9AIJRJCGHQRNMHCYRKJGCIIJCJIDWGCBLLRCGDQXKZSKLHYEJ\
PXBSQJQXDGSZUJSZMQWDJLGZPIJTOVOOXTBI9DCL9RXPGLJWBX9"
            .chars()
            .collect();

        let expected: Trinary = "YWXHOTXNQW9AJHLNAKHAPDZPXADXDUXJVHFYWJBQEPXPXJHQOBQPVMOITOZOXJTUMEFMWHZBVLFLVX999"
            .chars()
            .collect();

        test_pow::<A, B, C>(tx, expected, 9);
    }

    pub fn test_pow<A, B, C>(input: Trinary, expected: Trinary, weight: u8)
    where
        A: ProofOfWork,
        B: Copy,
        C: Curl<B>,
        Trinary: IntoTrits<B> + FromIterator<B>,
    {
        let nonce: Trinary = A::search(input, weight).expect("Some PoW Failure.");
        assert_eq!(nonce.trits().len(), 243);
        assert_eq!(nonce, expected);
    }


}

pub fn run<A, B>()
where
    A: Copy,
    B: Curl<A>,
    Trinary: IntoTrits<A> + FromIterator<A>,
{
    // run tests
    inner::hash_works1::<A, B>();
    inner::hash_works2::<A, B>();
}

pub fn run_search<A, B, C>()
where
    A: ProofOfWork,
    B: Copy,
    C: Curl<B>,
    Trinary: IntoTrits<B> + FromIterator<B>,
{
    inner::test_pow_1::<A, B, C>();
    inner::test_pow_2::<A, B, C>();
    inner::test_pow_3::<A, B, C>();
}
