use trytes::*;
use inner::*;

use super::NonceView;
use super::types::*;
use super::constants::*;
use super::builder::*;

#[derive(Clone, Eq, PartialEq)]
pub struct TransactionView<'a>(&'a [Trit]);

impl<'a> TransactionView<'a> {
    pub fn from_trits(base: &'a [Trit]) -> Result<Self, TransactionParseError> {
        if base.len() != HASH_LEN_TRITS {

            return Err(TransactionParseError::InvalidLength);
        }
        Ok(TransactionView(base))
    }

    pub fn to_builder(&self) -> TransactionBuilder {
        TransactionBuilder::from_trits(self).unwrap()
    }
}

impl<'a> ::core::ops::Deref for TransactionView<'a> {
    type Target = [Trit];
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}

impl<'a> Transaction<'a> for TransactionView<'a> {
    fn signature_or_message(&self) -> &[Trit] {
        &self.0[0..ADDRESS_OFFSET]
    }

    fn address(&self) -> HashView<'a> {
        HashView::from_trits(&self.0[ADDRESS_OFFSET..VALUE_OFFSET]).unwrap()
    }

    fn value(&self) -> isize {
        num::trits2int(&self.0[VALUE_OFFSET..TAG_OFFSET])
    }

    fn tag(&self) -> TagView<'a> {
        TagView::from_trits(&self.0[TAG_OFFSET..TIMESTAMP_OFFSET]).unwrap()
    }

    fn timestamp(&self) -> usize {
        num::trits2int(&self.0[TIMESTAMP_OFFSET..CURRENT_INDEX_OFFSET]) as usize
    }

    fn current_index(&self) -> usize {
        num::trits2int(&self.0[CURRENT_INDEX_OFFSET..LAST_INDEX_OFFSET]) as usize
    }

    fn last_index(&self) -> usize {
        num::trits2int(&self.0[LAST_INDEX_OFFSET..BUNDLE_OFFSET]) as usize
    }

    fn bundle(&self) -> HashView<'a> {
        HashView::from_trits(&self.0[BUNDLE_OFFSET..TRUNK_OFFSET]).unwrap()
    }

    fn trunk(&self) -> HashView<'a> {
        HashView::from_trits(&self.0[TRUNK_OFFSET..BRANCH_OFFSET]).unwrap()
    }

    fn branch(&self) -> HashView<'a> {
        HashView::from_trits(&self.0[BRANCH_OFFSET..NONCE_OFFSET]).unwrap()
    }

    fn nonce(&self) -> NonceView<'a> {
        NonceView::from_trits(&self.0[NONCE_OFFSET..TRANSACTION_LEN_TRITS]).unwrap()
    }
}

#[cfg(test)]
mod test {
    use super::*;
    use alloc::Vec;

    #[test]
    fn tx1() {

        const TX1: &'static str = "KGYTQSLYKIFRXCADXJFRC9PQSFDGVPX9HTIYZMMT9LDALXZK9CUPBRWLCIQC\
DRKOQPHDTDCOJZYYVCVQHOG9TVMGNRGHYZVO9FFMXKMEOAMJIJDEFJXFYPPE\
NPRHGTWYRDJBSGSHRURJRSTHHHVMQJVXJTCNEKJXEXUFDAJBNEIDMVCPHQBJ\
AOQLPDOBDCLBVYPLPPVOYXYLRJMRVVPYXGGYCZMEHVJDSSMPRYKYOYG9TQXH\
RUTPQMWJMMMSZ9ABUVJATBJ9ENCTPRTUDEDGKHKCCAGSFVYNJKSKAZDESJXC\
BXTLHKNSY9EDAOJAJCDMHASBNKXEOZSJDZRFEZUBWXXJTMKZADOAVLLBDFPW\
QGAAWNZTC9KPCWUJUOQLPD9NVQPHMVRWU9PXHR9VBPGXTLJENDCLLOSEHKXD\
AXRJGUFAHILMUNYLWSOARQEOUWSTQKLLDMWQ9BJAKQVRCCFFQVBUCWBJWGEN\
MTOX9WJDCWYTTPX9MZTABTBNQQKXHDQVSDUIQR9MRZYUHSKFSDFDCUJVDAFR\
BZTLITOLNGFAUNGNAOYT9XKVYUWYQIZTWSVJIOESIGHQVATXSMUTXPMDQATE\
HAXVXVCADIGINNZTGRWKAJHILGJFQZNQSHK9R9QLTSZTVNMBWIVVVLWBK9RY\
ZPZVRCDPSWVCGTFJCIGYHKOZKGJOOAYXRFCKKBQQBVYVHWMYNYFKYRNWQIGM\
QVIKAUOIKR9X9FMCZRZXZAK9RRIIYHQBV9YIPGLOHIYJWLHXHNUKZQVQFLGU\
SJNHKUJPZWYJCCJEXSWVGWTXRPMMTCQJRPJKFSZBBHJEFRGCUBDEQJIQGWTF\
ZZSKRFOFACOHGEXDYT9TIWZDGOWHHPT9PFAZVBPJSPRXKKEVGKPJOCRKXEGK\
TGYKFAYYXWLRMKLP9PQUNSXOLEGAYIJBGFPXLFRTCEDIOHURJOJTKGWQXZRO\
FWMIPSKAQUXPTAJAKMBPSMYPJBNIFEUIGGGNEHVSSO9PFNFORZLVVXBPDLAL\
WXXGTDEHJRBROVTCKFNR9JNFQKYBTJQSNQZRYZYMWLILMYDXCHFMVAXBVP9C\
ZZRNINNNRGFMRHSCUCZNOHPO9QJZAMJINJBIK9ICKOGZJZGLJLZLDV9IRQOV\
KGSPEGDLUKZXTHVZNJXWEJMSQZOCMWBVSKBGHBXJTLZQJDGEZBVMOCAIIFBT\
EV9IOHRO9HRYIW9OJFYECIQPISYFYOCLZDAHCWAKEZINHMGDIPOGANIPCAFC\
UCUQH9EABGYVIAYZD9TKMEZRQIECADWMVPZC9OZZU9FJZIPFAHLCMIUVWUCC\
XHNX9VAEGFSNYJKBZKPCYLXPWBDOR9EZATYHYZJVZSQFYHCCW9VDXJNXTDBO\
LNGLZANVYRXMBNBBXEUPCGZMYMEQDXHAWERKQSTXKXJZWGFMWIIVDAPBOMLM\
JSISPMJQWSCRZLBV9RUCJQQGVLQCUQCDNVAIGMSJGHM9NKHPZGUHTX9XJAKV\
GVYKXJK9HVFBSYSUIZI9WW9QEINDYBNWOUHAS99PVUGUKSHL9UYSUBTUTBNI\
CWCHTLTXWCOXUTYHWKSHZKJEGEBVYWYUDVXEXWVJOMJNNYCVCYLHKJZBYPXU\
QHESDKIOUGNCLNMTYQYXUFLOYP9KXRYXKWYDUEQXQ9XZFAYCFQCTDYMYWJLV\
EACJFBAUCUAXGCFMTXHTHMLTFPVZGONMCDMNBWPUTXDAFDNRPQWL9EMKEKLA\
NGBEUMKIJZBJVS9ABDHRPCJXVZWQUJFFHJHDKF9XFHMMLCKNABZEVPENTMNA\
YMRGYKMUTL9GDHWAILJTRCVKGPTBBVIIEBUKDAEBRUEQVLPDYGVUNUD9XMUE\
MXRAYTHSDJDLLJDMHSSGTIO9GRZPNYCBL9IZZOKXKB9DYTBYJLDAIP9SKVNT\
PADXQMAEHIDLHUQFESEXXUEANJTTFLOKGMXSPDASEO9FVOXPCRLDFVEHRKTO\
EWERZQESKQZKHJQQTIAFYNV9JDLTZUFGYAQWMURMATW9HFTIDTPBUJUF9ZNP\
CILKJCYRVIFDKCDHTPOSDOWRZQSQVJNURHWDDYQRSFEJFGZWZFRYASR9LZUK\
AXNR9JWSDTPCJXBJJJINFANYYMNTOMLEHWNKAQ9G9ZIH9YXKZURNQQYNLDRW\
KIFWQJZMEJGPXFCXGQMKBAEVZFBNEXHK9CRPMMIBGTEKUDHLKVGCZTOTCDZQ\
SXNXNSWIUWJKWQMXDLREAZBNXUCSDXYJBPGIWLQDJSZXSP9UHOZNDOW99999\
999999999999999999999999999999999999999999OVPNLWD99A99999999\
C99999999TPBVJTRLQQKZLASZWKTBZXS9JJVKLXQIRDRVPQEZTQBELCOBYIV\
WJZWXR9O9JHLQ9OUBQJXGKPTPEMYGVHKPDUEMBXJEUDPYJJAEQRBD9RRSIKB\
PS9LLPOUMWCTOUBKIEIANOZBDIXWWIMLFLZXPGKQWTLWVS99999YMJFFS9UB\
ZUM9FGQNBGTNBWNBTXQPMWCHNFNIJFSUIKCUFLF9BAWAWZZDYDSUC9MFVTWI\
SQGEUKP99999LPSI9VRPPHM9DRNWWZRVZWJGNIIRKYGKRHQNBNXNDIXPKDBX\
NVIFBFTPMCQZWTPDHUCGPC9FOXRVRYPCH";

        let tx1: Vec<Trit> = TX1.chars().flat_map(char_to_trits).cloned().collect();
        let txview = TransactionView(tx1.as_slice());
    }
}
